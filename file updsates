# Fashion Platform

An online fashion platform built with Django, Docker, and GitHub Actions for managing workflows. This platform allows users to browse fashion items and offers a clean, responsive UI for a great shopping experience.

## Features
- Product catalog with images, descriptions, and prices.
- Responsive design using Django templates.
- Automated testing and linting via GitHub Actions.
- Dockerized setup for seamless development.

---

## Project Structure
```plaintext
project-root/
|
├── .github/
│   └── workflows/
│       └── checks.yml         # Defines GitHub Actions workflow for testing and linting.
│
├── app/
│   ├── Dockerfile             # Specifies how to build the Docker image for the app.
│   ├── requirements.txt       # Lists Python dependencies required for the project.
│   ├── manage.py              # Django's command-line utility for administrative tasks.
│   └── app/                   # Main Django application directory.
│       ├── __init__.py        # Indicates that this is a Python package.
│       ├── settings.py        # Django project settings.
│       ├── urls.py            # URL configuration for the app.
│       ├── models.py          # Database models for the app.
│       ├── views.py           # Views defining the app's logic.
│       ├── templates/         # HTML templates for rendering pages.
│       └── tests.py           # Test cases for the app.
│
├── app/static/
│   ├── css/
│   │   └── style.css          # Styling for the application.
│   ├── js/
│   │   └── app.js             # Optional JavaScript functionality.
│   └── images/                # Image assets for the platform.
│
├── docker-compose.yml         # Defines and runs multi-container Docker applications.
├── .env                       # Example environment variables configuration.
├── .flake8                    # Configuration file for the Flake8 linter.
├── README.md                  # Provides an overview and setup instructions for the project.
└── LICENSE                    # License information for the project.
```

---

## Setup and Installation

### Prerequisites
- Python 3.8+
- Docker & Docker Compose
- Node.js (optional, for frontend builds)

### Clone the Repository
```bash
git clone https://github.com/UCJAYY/fashion-platform.git
cd fashion-platform
```

### Set Up the Environment
1. Create a `.env` file in the project root with the following:
```env
DEBUG=True
SECRET_KEY=your-secret-key
ALLOWED_HOSTS=localhost,127.0.0.1
DATABASE_URL=postgres://user:password@db:5432/db_name
```

2. Install dependencies (if not using Docker):
```bash
pip install -r app/requirements.txt
```

### Run the Project with Docker
1. Build and start the containers:
```bash
docker-compose up --build
```
2. Access the app at `http://localhost:8000`.

### Run Tests and Linter
- Run tests:
```bash
docker-compose run --rm app python manage.py test
```
- Run linting:
```bash
docker-compose run --rm app flake8
```

---

## Contributing
1. Fork the repository.
2. Create a new feature branch (`git checkout -b feature-name`).
3. Commit your changes (`git commit -m "Add feature"`).
4. Push to the branch (`git push origin feature-name`).
5. Open a Pull Request.

---

## License
This project is licensed under the MIT License. See the LICENSE file for details.

---

## Django Enhancements

### Models (`models.py`)
```python
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to='products/')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name
```

### Views (`views.py`)
```python
from django.shortcuts import render
from .models import Product

def product_list(request):
    products = Product.objects.all()
    return render(request, 'product_list.html', {'products': products})
```

### URL Configuration (`urls.py`)
```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
]
```

### Templates (`templates/product_list.html`)
```html
{% extends 'base.html' %}

{% block content %}
<h2>Our Products</h2>
<div>
    {% for product in products %}
    <div>
        <img src="{{ product.image.url }}" alt="{{ product.name }}">
        <h3>{{ product.name }}</h3>
        <p>{{ product.description }}</p>
        <p>${{ product.price }}</p>
    </div>
    {% endfor %}
</div>
{% endblock %}
```

---

## Docker Enhancements

### Dockerfile
```dockerfile
# Use the official Python image
FROM python:3.9

# Set the working directory
WORKDIR /usr/src/app

# Install dependencies
COPY app/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy the app code
COPY app/ ./app/

# Expose the application port
EXPOSE 8000

# Start the server
CMD ["python", "app/manage.py", "runserver", "0.0.0.0:8000"]
```

### `docker-compose.yml`
```yaml
version: '3.8'
services:
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db_name
    ports:
      - "5432:5432"
  app:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - .:/usr/src/app
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://user:password@db:5432/db_name
      - DEBUG=True
      - SECRET_KEY=your-secret-key
```

---

## GitHub Workflow Enhancements

### `.github/workflows/checks.yml`
```yaml
name: Checks
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt

    - name: Run tests
      run: |
        python app/manage.py test

    - name: Run linter
      run: |
        flake8
```
